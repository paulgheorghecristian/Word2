#version 430

layout(location = 0) out vec3 out_light;

uniform sampler2D eyeSpaceNormalSampler;
uniform sampler2D depthSampler;

uniform vec4 colorVector;
uniform int screenWidth, screenHeight;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 projectionMatrixInv;

in vec3 viewRay;
flat in vec3 lightPositionEyeSpace;

void main(){
    vec2 texCoord = gl_FragCoord.xy / vec2(screenWidth, screenHeight);

    float depth = 2.0 * texture(depthSampler, texCoord).x - 1.0;
    float eyeZ = projectionMatrix[3][2]/(depth + projectionMatrix[2][2]);

    vec3 view = vec3(viewRay.xy/-viewRay.z, -1.0);

    vec3 worldPosition = view * eyeZ;
    vec3 eyeSpaceNormal = texture(eyeSpaceNormalSampler, texCoord).rgb * 2.0 - vec3(1);

    vec3 dir = lightPositionEyeSpace - worldPosition;
    float strength = max(0.0, dot(eyeSpaceNormal, normalize(dir)));

    float l = length(dir);
    float a = 0.6, b = 0.001, c = 0.0003;
    float att = 1.0 / (a + b*l + c * l * l);

    out_light = att * strength  * colorVector.rgb;
}
