#version 430

in vec2 textureCoords;
out vec4 outColor;

uniform sampler2D normalSampler;
uniform sampler2D depthSampler;
uniform sampler2D lightSampler;
uniform sampler2D colorSampler;
uniform sampler2D particlesSampler;
uniform sampler2D particlesPostProcessSampler;
uniform int outputType;
uniform int hasTexture;

vec3 depth(){
    float t2 = pow(texture(depthSampler, textureCoords).x , 256);
    return vec3(t2,t2,t2);
}
vec3 particles(){
    return texture(particlesSampler, textureCoords).xyz;
}
vec3 particlesPostProcess(){
    return texture(particlesPostProcessSampler, textureCoords).xyz;
}
vec3 color(){
    return texture(colorSampler, textureCoords).xyz + particles() + particlesPostProcess() * 2;
}
vec3 world_normal(){
    return texture(normalSampler, textureCoords).xyz;
}
vec3 light_accumulation(){
    return texture(lightSampler, textureCoords).xyz + vec3(0.2,0.2,0.2);	//diffuse + ambiental (fara specular)
}

void main(){
    if(outputType == 1) outColor = vec4(color(), 1);
	if(outputType == 2) outColor = vec4(particlesPostProcess() * 2.0, 1);
	if(outputType == 3) outColor = vec4(particles()*2, 1);
	if(outputType == 4) outColor = vec4(world_normal(), 1);
	if(outputType == 5) outColor = vec4(light_accumulation(), 1);
	if(outputType == 6)
        if(depth().x != 1){
            outColor = vec4(color() * light_accumulation(), 1);
        }else{
            outColor = vec4(color(), 1);
        }
}
